/* dmk.pk - David M. Keil disk image format.  */

/* Copyright (C) 2023 by tim lindner */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Based on http://cpmarchives.classiccmp.org/trs80/mirrors/trs-80.com/early/www.trs-80.com/trs80-dm.htm
*/

set_endian(ENDIAN_BIG);

type DMK_Idam =
  struct
  {
    uint<8> track;
    uint<8> side;
    uint<8> sector;
    uint<8> size;
    uint<16> crc;
  };

set_endian(ENDIAN_LITTLE);

type DMK_Header =
  struct
  {
    byte write_protect;
    byte track_count;
    offset<uint<16>,B> track_length;
    uint<1> ignore_density;
    uint<1> single_density;
    uint<1>;
    uint<1> single_side;
    uint<4>;
    byte[7];
    byte[4] native_format;
  };

type DMK =
  struct
  {
    DMK_Header header;

    type DMK_IDAM_Pointer =
      struct
      {
        uint<8> offset_lo;
        uint<1> double_density;
        uint<1>;
        uint<6> offset_hi;

        method get_offset = uint<14>:
        {
          return offset_hi ::: offset_lo;
        }
        method set_offset = (uint<14> c) void:
        {
          offset_hi = c .>> 8;
          offset_lo = c;
        }
        method _print = void:
        {
          if (get_offset() != 0)
          {
            printf "#<%u14x%s>", get_offset(), double_density ? "" : "_S";
          }
        }
      };

    type DMK_Track =
      struct
      {
        var data_offset = OFFSET;
        DMK_IDAM_Pointer[64] pointer;
        byte[0] @ OFFSET + header.track_length - 128#B;

        method _print = void:
        {
          printf "%v", pointer;
          print "\n";
        }

        method get_idam_by_index = (uint<6> index) DMK_Idam:
        {
          return DMK_Idam @ pointer'ios : pointer'offset + data_offset + pointer[index].get_offset()#B + 1#B;
        }
      };

    DMK_Track[header.track_count] track;

  };
