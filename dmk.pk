/* dmk.pk - David M. Keil disk image format.  */

/* Copyright (C) 2023 by tim lindner */

/* This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, version 2 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * Based on http://cpmarchives.classiccmp.org/trs80/mirrors/trs-80.com/early/www.trs-80.com/trs80-dm.htm
*/

type DMK_Idam =
  struct
  {
    uint<8> track;
    uint<8> side;
    uint<8> sector;
    uint<8> size;
    big uint<16> crc;

    method calculated_size = int:
    {
      return 128 <<. size;
    }
  };

type DMK_Header =
  struct
  {
    byte write_protect;
    byte track_count;
    little offset<uint<16>,B> track_length;
    uint<1> ignore_density;
    uint<1> single_density;
    uint<1>;
    uint<1> single_side;
    uint<4>;
    byte[7];
    byte[4] native_format;
  };

type DMK =
  struct
  {
    DMK_Header header;

    type DMK_IDAM_Pointer =
      struct
      {
        little struct uint<16>
        {
          uint<1> double_density;
          uint<1>;
          offset<uint<14>,B> idam_offset;
        } pointer;

        method _print = void:
        {
          printf "#<%u14x%s>", pointer.idam_offset'magnitude, pointer.double_density ? " (D)" : " (S)";
        }
      };

    type DMK_Track =
      struct
      {
        var data_offset = OFFSET;
        DMK_IDAM_Pointer[64] pointer;
        byte[0] @ OFFSET + header.track_length - 128#B;

        method _print = void:
        {
          for (i in pointer where i.pointer.idam_offset != 0#B ) printf " %v", i;
          print "\n";
        }

        method get_idam_by_index = (uint<6> index) DMK_Idam:
        {
          return DMK_Idam @ SELF'offset + data_offset + pointer[index].pointer.idam_offset + 1#B;
        }

        method get_idam_by_id = (uint<8> id) DMK_Idam:
        {
          for (i in pointer where i.pointer.idam_offset != 0#B )
          {
            var a = DMK_Idam @ SELF'offset + data_offset + i.pointer.idam_offset + 1#B;

            if (a.sector == id)
            {
              return a;
            }
          }

          raise E_elem;
        }

        method get_data_by_idam = (DMK_Idam idam) uint<8>[]:
        {
          for (var i=idam'offset + 5#B; i<idam'offset + 60#B; i++ )
          {
            if ((uint<8>@i) == 0xa1 && (uint<8>@i+1#B) == 0xa1 && (uint<8>@i+2#B) == 0xfb)
            {
              return uint<8>[idam.calculated_size()]@i+3#B;
            }
          }
          raise E_elem;
        }

        method get_data_by_index = (uint<6> index) uint<8>[]:
        {
          return get_data_by_idam(get_idam_by_index(index));
        }

        method get_data_by_id = (uint<8> id) uint<8>[]:
        {
          return get_data_by_idam(get_idam_by_id(id));
        }
      };

    DMK_Track[header.track_count] track;

  };
